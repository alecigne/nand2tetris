#+TITLE: nand2tetris

My repo for the [[https://www.nand2tetris.org/]["nand2tetris" project]]. The corresponding MOOC, "Build
a Modern Computer from First Principles: From Nand to Tetris", is
available on [[https://www.coursera.org/learn/build-a-computer][Coursera]].

* Progress

- [X] Week 1: Boolean Functions and Gate Logic
- [X] Week 2: Boolean Arithmetic and the ALU
- [ ] Week 3: Memory

* Logisim files

My goal is to implement most chips with [[http://www.cburch.com/logisim/][Logisim]] (=.circ= files). I
might give a try to [[https://github.com/hneemann/Digital][Digital]] later.

Here is the =Mux16= gate for example:

[[file:.nand2tetris/Mux16.png]]

And here is the corresponding HDL file:

#+begin_example
  CHIP Mux16 {
          IN a[16], b[16], sel;
          OUT out[16];

          PARTS:
          Mux(a=a[0], b=b[0], sel=sel, out=out[0]);
          Mux(a=a[1], b=b[1], sel=sel, out=out[1]);
          Mux(a=a[2], b=b[2], sel=sel, out=out[2]);
          Mux(a=a[3], b=b[3], sel=sel, out=out[3]);
          Mux(a=a[4], b=b[4], sel=sel, out=out[4]);
          Mux(a=a[5], b=b[5], sel=sel, out=out[5]);
          Mux(a=a[6], b=b[6], sel=sel, out=out[6]);
          Mux(a=a[7], b=b[7], sel=sel, out=out[7]);
          Mux(a=a[8], b=b[8], sel=sel, out=out[8]);
          Mux(a=a[9], b=b[9], sel=sel, out=out[9]);
          Mux(a=a[10], b=b[10], sel=sel, out=out[10]);
          Mux(a=a[11], b=b[11], sel=sel, out=out[11]);
          Mux(a=a[12], b=b[12], sel=sel, out=out[12]);
          Mux(a=a[13], b=b[13], sel=sel, out=out[13]);
          Mux(a=a[14], b=b[14], sel=sel, out=out[14]);
          Mux(a=a[15], b=b[15], sel=sel, out=out[15]);
  }
#+end_example

When a chip has been implemented before, then I use the corresponding
Logisim's built-in chip when it's available. For example, in this
implementation of Mux16, I use Logisim's Mux, but the multiplexer
itself has been implemented before from And, Not and Or:

[[file:.nand2tetris/Mux.png]]

#+begin_example
  CHIP Mux {
          IN a, b, sel;
          OUT out;

          PARTS:
          Not (in=sel, out=notsel);
          And (a=a, b=notsel, out=aAndNotsel);
          And (a=sel, b=b, out= selAndb);
          Or (a=aAndNotsel, b=selAndb, out=out);
  }
#+end_example

...and so on all the way to [[https://en.wikipedia.org/wiki/NAND_gate][Nand]]!
