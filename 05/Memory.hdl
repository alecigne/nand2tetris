// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
* The complete address space of the Hack computer's memory,
* including RAM and memory-mapped I/O. 
* The chip facilitates read and write operations, as follows:
*     Read:  out(t) = Memory[address(t)](t)
*     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
* In words: the chip always outputs the value stored at the memory 
* location specified by address. If load==1, the in value is loaded 
* into the memory location specified by address. This value becomes 
* available through the out output from the next time step onward.
* Address space rules:
* Only the upper 16K+8K+1 words of the Memory chip are used. 
* Access to address>0x6000 is invalid. Access to any address in 
* the range 0x4000-0x5FFF results in accessing the screen memory 
* map. Access to address 0x6000 results in accessing the keyboard 
* memory map. The behavior in these addresses is described in the 
* Screen and Keyboard chip specifications given in the book.
*/

CHIP Memory {
	IN in[16], load, address[15];
	OUT out[16];

	PARTS:
	// Select between a RAM load, a screen load, or no load. First
	// choice (RAM vs others) based on the address MSB, second choice
	// (Screen vs nothing) based on the address 2nd-MSB. If it is 0,
	// then load the screen memory map.
	DMux (in=load, sel=address[14], a=load-ram, b=dmux1); 	// IMO a DMux4Way would be quite "expensive" and inelegant here.
	Not (in=address[13], out=not-kbd);
	And (a=dmux1, b=not-kbd, out=load-scr);

	// Just plug things in.
	RAM16K (in=in, load=load-ram, address=address[0..13], out=out-ram);
	Screen (in=in, load=load-scr, address=address[0..12], out=out-scr);
	Keyboard (out=out-kbd);

	// Choose output based on MSB and 2nd-MSB.
	Mux16 (a=out-scr, b=out-kbd, sel=address[13], out=mux1);
	Mux16 (a=out-ram, b=mux1, sel=address[14], out=out);
}
